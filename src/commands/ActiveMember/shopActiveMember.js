const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const { activeMemberRoleId, activeMemberLogChannel, sendCommandsChannel } = require("../../../config.json");
const { QuickDB } = require("quick.db");
const { join } = require("path");

const rootdir = process.cwd(); // Pega a pasta atual do arquivo principal que ta sendo executado

// Instanciando a o arquivo activeMember do banco de dados e pegando a tabela memberBloods
const database = {
  activeMember: new QuickDB({ table: "memberBloods", filePath: join(rootdir, "database/activeMember.sqlite") }),
  activeMember: new QuickDB({ table: "activeMemberDuration", filePath: join(rootdir, "database/activeMember.sqlite") }),
};

module.exports = {
  data: new SlashCommandBuilder()
    .setName("loja")
    .setDescription("Veja todos os itens da loja no momento")
    .addStringOption((option) =>
      option
        .setName("comprar")
        .setDescription("Adquira a sua assinatura de Membro Ativo, v√°lida por 30 dias.")
        .setRequired(true)
        .addChoices({ name: "[Cargo] Membro Ativo", value: "buyAtiveMember" })
    ),

  async execute(interaction) {
    // Pegando o ID do usu√°rio que est√° enviando o comando
    const userId = interaction.user.id;

    // Pega o Nome principal do usu√°rio
    const userName = interaction.user.displayName;

    // Pega a URL do avatar do usu√°rio
    const userIcon = interaction.user.displayAvatarURL();

    // --- Coloque o valor que vai custar para comprar o cargo de Membro Ativo ---
    const getValueActiveMember = 5000;

    // Passa o ID do cargo que vai ser dado ao usu√°rio (EDITAR)
    const getActiveMemberRole = activeMemberRoleId;

    // Pega o timestamp que foi armazenado no usu√°rio na tabela activeMemberDuration
    const getTimestampDatabase = await (await database.activeMember.tableAsync("activeMemberDuration")).get(`${userId}.timestampDuration`);

    // Pega os pontos que o usu√°rio tem na database na tabela de memberBloods
    let getBloodsDatabase = await (await database.activeMember.tableAsync("memberBloods")).get(`${userId}.bloods`);

    // Pega o timestamp atual
    let timestamp = +new Date();

    // Caso o canal for diferente do canal sendCommandsChannel ele retorna uma mensagem e para aqui
    if (interaction.channel.id !== sendCommandsChannel) {
      const embedBlockChannel = new EmbedBuilder()
        .setDescription(
          `### <:error:1212567041094058057> [Error] Por favor, utilize apenas o canal <#${sendCommandsChannel}> para enviar este comando!`
        )
        .setColor("#ff0000");

      return await interaction.reply({ embeds: [embedBlockChannel], ephemeral: true });
    }

    // Criando o bot√£o de Confirmar
    const buttonConfirm = new ButtonBuilder()
      .setCustomId("confirm")
      .setLabel("Confirmar")
      .setStyle(ButtonStyle.Success)
      .setEmoji("1212567042738233385");

    // Criando o bot√£o de Cancelar
    const buttonCancel = new ButtonBuilder().setCustomId("cancel").setLabel("Cancelar").setStyle(ButtonStyle.Danger).setEmoji("1212567041094058057");

    // Juntando os 2 bot√µes em uma ActionRow
    const rowButtons = new ActionRowBuilder().addComponents(buttonConfirm, buttonCancel);

    // Caso o valor retornado seja undefined ou null ele troca o valor por 0
    if (getBloodsDatabase === undefined || getBloodsDatabase === null) {
      getBloodsDatabase = 0;
    }

    // Caso exista um valor no getTimestampDatabase ele retorna uma mensagem que a assinatura ainda esta ativa
    if (getTimestampDatabase) {
      const embedAlready = new EmbedBuilder()
        .setAuthor({ name: `${userName}`, iconURL: userIcon })
        .setDescription(
          `Sua assinatura como <@&${getActiveMemberRole}> ainda est√° v√°lida e permanecer√° ativa at√© o dia <t:${getTimestampDatabase}:f>`
        )
        .setColor("#ff0000");

      return await interaction.reply({ content: `<@${userId}>`, embeds: [embedAlready] });
    }

    // Caso o valor que o usu√°rio tenha for menor que getValueActiveMember ele retorna mandando uma mensagem de saldo insuficiente
    if (getBloodsDatabase < getValueActiveMember) {
      const embedInsufficientValue = new EmbedBuilder()
        .setAuthor({ name: `${userName}`, iconURL: userIcon })
        .setDescription(
          `* Voc√™ tem apenas \`Ôæ†${getBloodsDatabase} Bloods ü©∏\` dispon√≠veis.
          * Voc√™ precisar√° de mais \`Ôæ†${getValueActiveMember - getBloodsDatabase} Bloods ü©∏\` para adquirir o cargo desejado!`
        )
        .setColor("#ff0000");
      return await interaction.reply({ content: `<@${userId}>`, embeds: [embedInsufficientValue] });
    }

    const embedBuy = new EmbedBuilder()
      .setTitle("Membro Ativo")
      .setDescription(
        `O Cargo de Membro Ativo √© uma assinatura especial que oferece uma s√©rie de vantagens exclusivas para os membros dedicados de nossa comunidade no Discord. Ao adquirir este cargo, voc√™ se torna parte de um grupo seleto de membros que desfrutam de privil√©gios especiais e uma atmosfera ainda mais envolvente.
    
    **Valor \`Ôæ†${getValueActiveMember} Bloods ü©∏\`**
    
    **Estoque \`‚ôæÔ∏è\`**

    **Dura√ß√£o \`30 Dias\`**

    **Voc√™ receber√° o cargo <@&${getActiveMemberRole}>**
    
    **Esta mensagem desaparecer√° <t:${Math.round((timestamp + 30000) / 1000)}:R>**
    `
      )
      .setColor("#ffffff");

    // Envia e armazena a mensagem embedBuy com os bot√µes juntos
    const sendEmbedBuy = await interaction.reply({ content: `<@${userId}>`, embeds: [embedBuy], components: [rowButtons] });

    // Deleta a mensagem sendEmbedBuy ap√≥s 30 segundos que o comando slash command foi chamado
    const deleteTimeout = setTimeout(() => {
      sendEmbedBuy.delete();
    }, 30 * 1000);

    try {
      // Cria um filtro para que apenas o usu√°rio que mandou o comando interaja com os bot√µes de confirm e cancel
      const collectorFilter = (i) => i.user.id === interaction.user.id;

      // Adiciona o filtro na mensagem sendEmbedBuy e cria a intera√ß√£o com os bot√µes
      const confirmation = await sendEmbedBuy.awaitMessageComponent({ filter: collectorFilter });

      if (confirmation.customId === "confirm") {
        // Caso exista um valor no getTimestampDatabase ele retorna uma mensagem que a assinatura ainda esta ativa
        if (getTimestampDatabase) {
          const embedAlready = new EmbedBuilder()
            .setAuthor({ name: `${userName}`, iconURL: userIcon })
            .setDescription(
              `Sua assinatura como <@&${getActiveMemberRole}> ainda est√° v√°lida e permanecer√° ativa at√© o dia <t:${getTimestampDatabase}:f>`
            )
            .setColor("#ff0000");

          return await confirmation.update({ content: `<@${userId}>`, embeds: [embedAlready] });
        }

        // Adiciona 30 dias no timestamp
        timestamp += 30 * 24 * 60 * 60 * 1000;

        // Divide por 1000 e tira tudo depois do ponto
        timestamp = Math.round(timestamp / 1000);

        // Armazena o timestamp na database
        await (await database.activeMember.tableAsync("activeMemberDuration")).set(`${userId}.timestampDuration`, timestamp);

        // Adiciona o cargo no usu√°rio que foi passado na vari√°vel getActiveMemberRole
        await interaction.member.roles.add(getActiveMemberRole);

        // Diminue os pontos que vem da database (getBloodsDatabase) pelos pontos passado na vari√°vel getValueActiveMember
        getBloodsDatabase -= getValueActiveMember;

        // Seta os pontos restante na tabela de memberBloods da database
        await (await database.activeMember.tableAsync("memberBloods")).set(`${userId}.bloods`, getBloodsDatabase);

        const embedBuySuccess = new EmbedBuilder()
          .setAuthor({ name: `${userName}`, iconURL: userIcon })
          .setDescription(`Voc√™ adquiriu o cargo de <@&${getActiveMemberRole}>, e ele permanecer√° v√°lido at√© o dia: <t:${timestamp}:f>`)
          .setColor("#15ff00");

        // Atualiza a mensagem sendEmbedBuy para embedBuySuccess
        await confirmation.update({ embeds: [embedBuySuccess], components: [] });

        // Parte de logs Staff

        const channel = interaction.guild.channels.cache.get(activeMemberLogChannel);

        const embedUserBuySuccess = new EmbedBuilder()
          .setDescription(`### <:add:1212567044428533760> [Log] O membro <@${userId}> obteve o cargo de <@&${getActiveMemberRole}> atrav√©s da loja.`)
          .setColor("#15ff00");

        channel.send({ embeds: [embedUserBuySuccess] });

        // Limpa o Timeout criado para deletar a mensagem
        clearTimeout(deleteTimeout);
      } else if (confirmation.customId === "cancel") {
        const embedBuyCancel = new EmbedBuilder()
          .setAuthor({ name: `${userName}`, iconURL: userIcon })
          .setDescription(`Sua compra foi cancelada com sucesso.`)
          .setColor("#15ff00");

        await confirmation.update({ embeds: [embedBuyCancel], components: [] });

        // Limpa o Timeout criado para deletar a mensagem
        clearTimeout(deleteTimeout);
      }
    } catch (e) {}
  },
};
